#!/usr/bin/python

import os
from dotenv import load_dotenv
import telebot
from random import randrange
from service.DBService import DBService

dbService = DBService()

load_dotenv()

bot_token = os.getenv('BOT_TOKEN')
bot_name = os.getenv('BOT_NAME')
bot = telebot.TeleBot(bot_token)

card_names = (
'—à—É—Ç',
'–º–∞–≥',
'–∂—Ä–∏—Ü–∞',
'–∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞',
'–∏–º–ø–µ—Ä–∞—Ç–æ—Ä',
'–∂—Ä–µ—Ü',
'–≤–ª—é–±–ª—ë–Ω—ã–µ',
'–∫–æ–ª–µ—Å–Ω–∏—Ü–∞',
'—Å–∏–ª–∞',
'–æ—Ç—à–µ–ª—å–Ω–∏–∫',
'—Ñ–æ—Ä—Ç—É–Ω–∞',
'—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å',
'–ø–æ–≤–µ—à–µ–Ω–Ω—ã–π',
'—Å–º–µ—Ä—Ç—å',
'—É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
'–¥—å—è–≤–æ–ª',
'–±–∞—à–Ω—è',
'–∑–≤–µ–∑–¥–∞',
'–ª—É–Ω–∞',
'—Å–æ–ª–Ω—Ü–µ',
'—Å—É–¥',
'–º–∏—Ä',

'—Ç—É–∑_–∂–µ–∑–ª–æ–≤',
'–¥–≤–æ–π–∫–∞_–∂–µ–∑–ª–æ–≤',
'—Ç—Ä–æ–π–∫–∞_–∂–µ–∑–ª–æ–≤',
'—á–µ—Ç–≤–µ—Ä–∫–∞_–∂–µ–∑–ª–æ–≤',
'–ø—è—Ç–µ—Ä–∫–∞_–∂–µ–∑–ª–æ–≤',
'—à–µ—Å—Ç–µ—Ä–∫–∞_–∂–µ–∑–ª–æ–≤',
'—Å–µ–º–µ—Ä–∫–∞_–∂–µ–∑–ª–æ–≤',
'–≤–æ—Å—å–º–µ—Ä–∫–∞_–∂–µ–∑–ª–æ–≤',
'–¥–µ–≤—è—Ç–∫–∞_–∂–µ–∑–ª–æ–≤',
'–¥–µ—Å—è—Ç–∫–∞_–∂–µ–∑–ª–æ–≤',
'–ø–∞–∂_–∂–µ–∑–ª–æ–≤',
'—Ä—ã—Ü–∞—Ä—å_–∂–µ–∑–ª–æ–≤',
'–∫–æ—Ä–æ–ª–µ–≤–∞_–∂–µ–∑–ª–æ–≤',
'–∫–æ—Ä–æ–ª—å_–∂–µ–∑–ª–æ–≤',

'—Ç—É–∑_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–¥–≤–æ–π–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'—Ç—Ä–æ–π–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'—á–µ—Ç–≤–µ—Ä–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–ø—è—Ç–µ—Ä–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'—à–µ—Å—Ç–µ—Ä–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'—Å–µ–º–µ—Ä–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–≤–æ—Å—å–º–µ—Ä–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–¥–µ–≤—è—Ç–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–¥–µ—Å—è—Ç–∫–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–ø–∞–∂_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'—Ä—ã—Ü–∞—Ä—å_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–∫–æ—Ä–æ–ª–µ–≤–∞_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',
'–∫–æ—Ä–æ–ª—å_–ø–µ–Ω—Ç–∞–∫–ª–µ–π',

'—Ç—É–∑_–∫—É–±–∫–æ–≤',
'–¥–≤–æ–π–∫–∞_–∫—É–±–∫–æ–≤',
'—Ç—Ä–æ–π–∫–∞_–∫—É–±–∫–æ–≤',
'—á–µ—Ç–≤–µ—Ä–∫–∞_–∫—É–±–∫–æ–≤',
'–ø—è—Ç–µ—Ä–∫–∞_–∫—É–±–∫–æ–≤',
'—à–µ—Å—Ç–µ—Ä–∫–∞_–∫—É–±–∫–æ–≤',
'—Å–µ–º–µ—Ä–∫–∞_–∫—É–±–∫–æ–≤',
'–≤–æ—Å—å–º–µ—Ä–∫–∞_–∫—É–±–∫–æ–≤',
'–¥–µ–≤—è—Ç–∫–∞_–∫—É–±–∫–æ–≤',
'–¥–µ—Å—è—Ç–∫–∞_–∫—É–±–∫–æ–≤',
'–ø–∞–∂_–∫—É–±–∫–æ–≤',
'—Ä—ã—Ü–∞—Ä—å_–∫—É–±–∫–æ–≤',
'–∫–æ—Ä–æ–ª–µ–≤–∞_–∫—É–±–∫–æ–≤',
'–∫–æ—Ä–æ–ª—å_–∫—É–±–∫–æ–≤',

'—Ç—É–∑_–º–µ—á–µ–π',
'–¥–≤–æ–π–∫–∞_–º–µ—á–µ–π',
'—Ç—Ä–æ–π–∫–∞_–º–µ—á–µ–π',
'—á–µ—Ç–≤–µ—Ä–∫–∞_–º–µ—á–µ–π',
'–ø—è—Ç–µ—Ä–∫–∞_–º–µ—á–µ–π',
'—à–µ—Å—Ç–µ—Ä–∫–∞_–º–µ—á–µ–π',
'—Å–µ–º–µ—Ä–∫–∞_–º–µ—á–µ–π',
'–≤–æ—Å—å–º–µ—Ä–∫–∞_–º–µ—á–µ–π',
'–¥–µ–≤—è—Ç–∫–∞_–º–µ—á–µ–π',
'–¥–µ—Å—è—Ç–∫–∞_–º–µ—á–µ–π',
'–ø–∞–∂_–º–µ—á–µ–π',
'—Ä—ã—Ü–∞—Ä—å_–º–µ—á–µ–π',
'–∫–æ—Ä–æ–ª–µ–≤–∞_–º–µ—á–µ–π',
'–∫–æ—Ä–æ–ª—å_–º–µ—á–µ–π',
)

i = 0
for card_name in card_names:
    print(f'{i}. {card_name}')
    os.rename(f'tarot_cards/{i}.webp','tarot_cards/' + card_name +'.webp')
    i += 1
exit()

def send_prediction(bot, message):
    card_numbers = []
    while (len(card_numbers) < 3):
        card_number = randrange(77)
        if card_number not in card_numbers:
            card_numbers.append(card_number)

    msg =  "–í–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è —Ç–µ–±—è ‚ú®\n\n"
    order = 0
    for card_number in card_numbers:
        file = open(f'tarot_cards/{card_number}.webp', 'rb')
        bot.send_sticker(message.chat.id, file, reply_to_message_id=message.message_id)
        order += 1
        msg =  msg + str(order) + '. ' + card_names[card_number].capitalize() + "\n"
    msg += "\n" + "‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®" 
    bot.send_message(message.chat.id, msg, reply_to_message_id=message.message_id)

# def send_help(bot, message):
#     msg = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ —Ç–∞—Ä–æ. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥, –Ω–∞–ø–∏—à–∏ –º–Ω–µ "—Ä–∞—Å–∫–ª–∞–¥" –∏–ª–∏ —Ç–µ–≥–Ω–∏ –º–µ–Ω—è –≤ —á–∞—Ç–µ ' + '@' + bot_name + ' üåü'
#     bot.send_message(message.chat.id, msg, reply_to_message_id=message.message_id)

# —Ä–∞—Å–∫–ª–∞–¥
@bot.message_handler(func=lambda message: message.text and bot_name in message.text)
@bot.message_handler(regexp='^[—Ä–†][–∞–ê][—Å–°][–∫–ö][–ª–õ][–∞–ê][–¥–î]$')
def get_prediction(message):
    user_id = message.from_user.id
    status = dbService.check_user_data(user_id)
    if status == 'user_not_found':
        send_prediction(bot, message)
        dbService.save_new_user(user_id)
    if status == 'allowed_to_predict':
        send_prediction(bot, message)
        dbService.update_user_last_prediction_at(user_id)
    
    if status == 'not_allowed_to_predict':
        msg = '–ö–æ–ª–æ–¥–µ –Ω—É–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòå'
        bot.send_message(message.chat.id, msg, reply_to_message_id=message.message_id)

bot.infinity_polling()